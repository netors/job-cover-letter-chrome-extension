name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.1)'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write

jobs:
  manual-release:
    name: Create Manual Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION (expected: x.y.z)"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

      - name: Update manifest version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "📝 Updating manifest.json version to $VERSION"
          
          # Update version in manifest.json
          jq ".version = \"$VERSION\"" manifest.json > manifest.json.tmp
          mv manifest.json.tmp manifest.json
          
          # Verify the change
          NEW_VERSION=$(jq -r '.version' manifest.json)
          if [ "$NEW_VERSION" != "$VERSION" ]; then
            echo "❌ Failed to update version in manifest.json"
            exit 1
          fi
          
          echo "✅ Version updated successfully"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Use npm ci to avoid modifying package-lock.json
          npm ci
          # Install sharp separately if not in package.json
          if ! npm list sharp --depth=0 >/dev/null 2>&1; then
            npm install sharp --no-save
          fi

      - name: Build extension
        run: |
          echo "🏗️ Building extension..."
          npm run build || node create-icons.js

      - name: Create package
        run: |
          VERSION="${{ github.event.inputs.version }}"
          PACKAGE_NAME="ai-cover-letter-generator-v${VERSION}.zip"
          
          echo "📦 Creating package: $PACKAGE_NAME"
          
          # Clean development files
          rm -f test-storage.js *.debug.md DEBUG.md GENERATION_DEBUG.md
          rm -f INSTALLATION.md INSTRUCTIONS_FOR_IMPROVEMENTS.md 
          rm -f PERSISTENCE_TESTING.md STORAGE_QUOTA_FIX.md
          
          # Create package
          zip -r "$PACKAGE_NAME" \
            manifest.json \
            popup.html \
            options.html \
            js/ \
            css/ \
            icons/ \
            -x "*.DS_Store" "*/.DS_Store" "*/Thumbs.db" \
            -x "**/*.log" "**/*.tmp" "**/*.backup" \
            -x "icons/*.svg"
            
          # Verify package was created
          if [ ! -f "$PACKAGE_NAME" ]; then
            echo "❌ Failed to create package"
            exit 1
          fi
          
          echo "✅ Package created successfully"
          ls -lh "$PACKAGE_NAME"
          
          # Set environment variables for later steps
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Commit version change
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # Check for changes and add them
          git add manifest.json
          
          # Add package-lock.json if it was modified by npm install
          if git diff --name-only | grep -q "package-lock.json"; then
            echo "📦 Adding updated package-lock.json"
            git add package-lock.json
          fi
          
          # Only commit if there are changes to commit
          if git diff --staged --quiet; then
            echo "ℹ️ No changes to commit"
          else
            git commit -m "Release v$VERSION

          🚀 Automated version bump for release
          
          - Updated manifest.json version to $VERSION
          - Updated package-lock.json (if changed)
          - Ready for Chrome Web Store submission
          
          Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          fi
          
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Chrome Extension v${{ env.VERSION }}
          body: |
            ## AI Cover Letter Generator v${{ env.VERSION }}
            
            🚀 **Chrome Web Store Ready Release!**
            
            This release was created manually and includes the latest features and bug fixes.
            
            ### 📦 Quick Install
            1. Download `${{ env.PACKAGE_NAME }}`
            2. Extract the zip file
            3. Load in Chrome: `chrome://extensions/` → Developer Mode → Load Unpacked
            
            ### 🔗 Resources
            - 📖 [Setup Guide](https://netors.github.io/job-cover-letter-chrome-extension/support.html)
            - 🏠 [Documentation](https://netors.github.io/job-cover-letter-chrome-extension/)
            - 🐛 [Issues](https://github.com/netors/job-cover-letter-chrome-extension/issues)
            
            ### Requirements
            - Chrome browser with Developer Mode
            - OpenAI or Anthropic API key
            
            ### 📊 Package Info
            - **Size**: $(ls -lh ${{ env.PACKAGE_NAME }} | awk '{print $5}')
            - **Contents**: Extension files ready for Chrome Web Store
            
            ---
            
            🤖 **Built with GitHub Actions**
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          files: ${{ env.PACKAGE_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}